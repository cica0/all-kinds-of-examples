/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef getout_H
#define getout_H

#include <thrift/TDispatchProcessor.h>
#include "student_types.h"



class getoutIf {
 public:
  virtual ~getoutIf() {}
  virtual void get(Student& _return, const int32_t sno) = 0;
};

class getoutIfFactory {
 public:
  typedef getoutIf Handler;

  virtual ~getoutIfFactory() {}

  virtual getoutIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(getoutIf* /* handler */) = 0;
};

class getoutIfSingletonFactory : virtual public getoutIfFactory {
 public:
  getoutIfSingletonFactory(const boost::shared_ptr<getoutIf>& iface) : iface_(iface) {}
  virtual ~getoutIfSingletonFactory() {}

  virtual getoutIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(getoutIf* /* handler */) {}

 protected:
  boost::shared_ptr<getoutIf> iface_;
};

class getoutNull : virtual public getoutIf {
 public:
  virtual ~getoutNull() {}
  void get(Student& /* _return */, const int32_t /* sno */) {
    return;
  }
};

typedef struct _getout_get_args__isset {
  _getout_get_args__isset() : sno(false) {}
  bool sno;
} _getout_get_args__isset;

class getout_get_args {
 public:

  getout_get_args() : sno(0) {
  }

  virtual ~getout_get_args() throw() {}

  int32_t sno;

  _getout_get_args__isset __isset;

  void __set_sno(const int32_t val) {
    sno = val;
  }

  bool operator == (const getout_get_args & rhs) const
  {
    if (!(sno == rhs.sno))
      return false;
    return true;
  }
  bool operator != (const getout_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const getout_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class getout_get_pargs {
 public:


  virtual ~getout_get_pargs() throw() {}

  const int32_t* sno;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _getout_get_result__isset {
  _getout_get_result__isset() : success(false) {}
  bool success;
} _getout_get_result__isset;

class getout_get_result {
 public:

  getout_get_result() {
  }

  virtual ~getout_get_result() throw() {}

  Student success;

  _getout_get_result__isset __isset;

  void __set_success(const Student& val) {
    success = val;
  }

  bool operator == (const getout_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const getout_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const getout_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _getout_get_presult__isset {
  _getout_get_presult__isset() : success(false) {}
  bool success;
} _getout_get_presult__isset;

class getout_get_presult {
 public:


  virtual ~getout_get_presult() throw() {}

  Student* success;

  _getout_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class getoutClient : virtual public getoutIf {
 public:
  getoutClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  getoutClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get(Student& _return, const int32_t sno);
  void send_get(const int32_t sno);
  void recv_get(Student& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class getoutProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<getoutIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (getoutProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  getoutProcessor(boost::shared_ptr<getoutIf> iface) :
    iface_(iface) {
    processMap_["get"] = &getoutProcessor::process_get;
  }

  virtual ~getoutProcessor() {}
};

class getoutProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  getoutProcessorFactory(const ::boost::shared_ptr< getoutIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< getoutIfFactory > handlerFactory_;
};

class getoutMultiface : virtual public getoutIf {
 public:
  getoutMultiface(std::vector<boost::shared_ptr<getoutIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~getoutMultiface() {}
 protected:
  std::vector<boost::shared_ptr<getoutIf> > ifaces_;
  getoutMultiface() {}
  void add(boost::shared_ptr<getoutIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get(Student& _return, const int32_t sno) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, sno);
    }
    ifaces_[i]->get(_return, sno);
    return;
  }

};



#endif
